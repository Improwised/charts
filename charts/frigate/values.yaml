# Default values for frigate.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# -- upgrade strategy type (e.g. Recreate or RollingUpdate)
strategyType: Recreate
image:
  # -- Docker registry/repository to pull the image from
  repository: ghcr.io/blakeblackshear/frigate
  # -- Overrides the default tag (appVersion) used in Chart.yaml ([Docker Hub](https://hub.docker.com/r/blakeblackshear/frigate/tags?page=1))
  tag: 0.13.0
  # -- Docker image pull policy
  pullPolicy:
# if using nfs then use nfs-client to mount
storageClassName: standard
# -- Docker image pull policy
imagePullSecrets: []
# -- additional ENV variables to set. Prefix with FRIGATE_ to target Frigate configuration values
env: {}
  # TZ: UTC

# -- set environment variables from Secret(s)
envFromSecrets: []
  # secrets are required before `helm install`
  # - frigate-rstp-credentials

coral:
  # -- enables the use of a Coral device
  enabled: true
  # -- path on the host to which to mount the Coral device
  hostPath: /dev/bus/usb
gpu:
  nvidia:
    # -- Enables NVIDIA GPU compatibility. Must also use the "amd64nvidia" tagged image
    enabled: false

    # -- Overrides the default runtimeClassName
    runtimeClassName:

# -- declare extra volumes to use for Frigate
extraVolumes: []
# -- declare additional volume mounts
extraVolumeMounts: []

# -- amount of shared memory to use for caching
shmSize: 1Gi

# nameOverride -- Overrides the name of resources
nameOverride: ""

# fullnameOverride -- Overrides the Full Name of resources
fullnameOverride: ""
# -- frigate configuration - see [Docs](https://docs.frigate.video/configuration/index) for more info
config: |
  mqtt:
    enabled: False

  cameras:
    name_of_your_camera: # <------ Name the camera
      ffmpeg:
        inputs:
          - path: rtsp://10.0.10.10:554/rtsp # <----- The stream you want to use for detection
            roles:
              - detect
      detect:
        enabled: False # <---- disable detection until you have a working camera feed
        width: 1280 # <---- update for your camera's resolution
        height: 720 # <---- update for your camera's resolution

# Probes configuration
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 30
    failureThreshold: 5
    timeoutSeconds: 10
  startup:
    enabled: false
    failureThreshold: 30
    periodSeconds: 10

service:
  # -- Type of Service to use
  type: ClusterIP
  # -- Port the Service should communicate on
  port: 5000
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
  ## Provide any additional annotations which may be required. This can be used to
  ## set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  annotations: {}
  labels: {}

  # -- Set specific IP address for LoadBalancer. `service.type` must be set to `LoadBalancer`
  loadBalancerIP:

  # loadBalancerSourceRanges: []
  ## Set the externalTrafficPolicy in the Service to either Cluster or Local
  # externalTrafficPolicy: Cluster

ingress:
  # -- Enables the use of an Ingress Controller to front the Service and can provide HTTPS
  enabled: true

  # -- annotations to configure your Ingress. See your Ingress Controller's Docs for more info.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # For NGINX INC, these may be neccessary
    # nginx.org/proxy-read-timeout: "3600"
    # nginx.org/proxy-send-timeout: "3600"
    # nginx.org/websocket-services: "<release_name>-frigate" # TODO: can this be automated?
    # nginx.ingress.kubernetes.io/auth-url: "https://oauth2-proxy.chart-frigate-local.com/oauth2/auth"
    # nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.chart-frigate-local.com/oauth2/start?rd=$scheme://$host$request_uri"

  # -- list of hosts and their paths that ingress controller should repsond to.
  hosts:
    - host: chart.frigate.local.com
      paths:
        - '/'

  # -- list of TLS configurations
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
  data:
    # -- Enables persistence for the data directory
    enabled: true
    ## frigate data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""      # "nfs-client"
    ##
    ## If you want to reuse an existing claim, you can pass the name of the PVC using
    ## the existingClaim variable
    # existingClaim: my-claim
    # subPath: some-subpath

    # -- [access mode](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) to use for the PVC
    accessMode: ["ReadWriteOnce"]

    # -- size/capacity of the PVC
    size: 1Gi

    # -- Do not delete the pvc upon helm uninstall
    skipuninstall: false

# -- Set resource limits/requests for the Pod(s)
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  #   gpu.intel.com/i915: 1
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  #   gpu.intel.com/i915: 1

# -- Set Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  # privileged: true

# -- Node Selector configuration
nodeSelector: {}

# -- Node toleration configuration
tolerations: []

# -- Set Pod affinity rules
affinity: {}

# -- Set additonal pod Annotations
podAnnotations: {}
