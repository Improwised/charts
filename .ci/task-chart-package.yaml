---
platform: linux

inputs:
  - name: repo
  - name:

outputs:
  - name: charts
    path: charts
  - name: repo
    path: repo
run:
  path: bash
  args:
    - -cx
    - |
      set -e
      TASK_ROOT=$(pwd)

      cd repo
      git config remote.origin.fetch refs/heads/*:refs/remotes/origin/*
      git fetch --all
      [[ "" == $(ct list-changed --config ct.yaml) ]] && echo "########### no changes found ###########" && exit 0

      git config --global user.email concourse@github-noreply.com
      git config --global user.name concourse

      export HELM_CONFIG_HOME=$(pwd)/

      source <(curl -s https://raw.githubusercontent.com/pratikbalar/bash-functions/main/functions.sh)
      tarr https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz ghr_v0.13.0_linux_amd64/ghr /usr/bin/ghr
      tarr https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_386.tar.gz yq_linux_386 /usr/bin/yq
      tarr https://github.com/git-chglog/git-chglog/releases/download/v0.14.2/git-chglog_0.14.2_linux_amd64.tar.gz git-chglog /usr/local/bin/git-chglog

      # locked version at v3.2.0
      wget -O /usr/bin/semvertool https://raw.githubusercontent.com/fsaintjacques/semver-tool/20028cb53f340a300b460b423e43f0eac13bcd9a/src/semver
      chmod a+x /usr/bin/semvertool

      BUMP_PATTERN='^(BREAKING[\-\ ]CHANGE|feat|fix|refactor|perf)(\(.+\))?(!)?'
      MAJOR='(^.+!|.*BREAKING[\-\ ]CHANGE)'
      MINOR='(^feat)'
      PATCH='(^fix|^perf|^refactor)'

      bumpp() {
        semvertool bump $1 $2
      }
      PROJECT_USERNAME=$(git config --get remote.origin.url | sed 's/git\@github\.com\:\|\.git\|https\:\/\/github\.com\///g' | awk -F\/ '{printf $1}')
      PROJECT_REPONAME=$(git config --get remote.origin.url | sed 's/git\@github\.com\:\|\.git\|https\:\/\/github\.com\///g' | awk -F\/ '{printf $2}')

      for chart in $(ct list-changed --config ct.yaml 2> /dev/null); do
        CHART_NAME=$(yq e '.name' $chart/Chart.yaml)
        CHART_SHA=$(git log --format=format:%H ${chart} | head -n 1)
        COMMIT_MESSAGE=$(git log --format=%B -n 1 $chart/)
        unset NEW_VERSION
        echo "Checking version bump for ${chart/charts\//}"
        printf "last commit message: \"${COMMIT_MESSAGE}\" \n"
        if [[ ${COMMIT_MESSAGE} =~ ${BUMP_PATTERN} ]]; then
          OLD_VERSION=$(yq e '.version' $chart/Chart.yaml)
          if [[ ${COMMIT_MESSAGE} =~ ${MAJOR} ]]; then
            BUMP="major"
            echo "Bumping ${BUMP}"
          elif [[ ${COMMIT_MESSAGE} =~ ${MINOR} ]]; then
            BUMP="minor"
            echo "Bumping ${BUMP}"
          elif [[ ${COMMIT_MESSAGE} =~ ${PATCH} ]]; then
            BUMP="patch"
            echo "Bumping ${BUMP}"
          else
            echo "${chart/charts\//}: skipping"
            continue
          fi
          export NEW_VERSION=$(bumpp ${BUMP} ${OLD_VERSION})                 # exported this because yq can use it with `env` operator
          yq eval '.version = env(NEW_VERSION)' $chart/Chart.yaml > $chart/_Chart.yaml
          mv $chart/_Chart.yaml $chart/Chart.yaml
          echo "${chart/charts\//}: ${OLD_VERSION} → ${NEW_VERSION}"

          echo "Packaging ${chart/charts\//}"

          helm package -u -d ${TASK_ROOT}/charts/charts $chart

          git add .
          git commit -m "bump: ${chart/charts\//} ${OLD_VERSION} → ${NEW_VERSION}"
          COMMIT_SHA=$(git rev-parse HEAD)

          echo "######## ${chart/charts\//} changelog START ########"
          git-chglog --config .ci/config.yml --path ${chart} ${CHART_NAME}-{OLD_VERSION}..${CHART_NAME}-{NEW_VERSION} -o /tmp/${CHART_NAME}-{NEW_VERSION}.md
          echo "######## ${chart/charts\//} changelog END   ########"
          git tag -d ${CHART_NAME}-{NEW_VERSION}
          echo "Releasing ${chart/charts\//}"
          ghr -token "${GITHUB_TOKEN}"            \
              -name "${CHART_NAME}-{NEW_VERSION}" \
              -body "$(cat /tmp/${CHART_NAME}-{NEW_VERSION}.md)"  \
              -owner "${PROJECT_USERNAME}"        \
              -repository "${PROJECT_REPONAME}"   \
              -commitish "${COMMIT_SHA}"          \
              -replace                            \
              ${CHART_NAME}-{NEW_VERSION}         \
              ${TASK_ROOT}/charts/charts/${CHART_NAME}-{NEW_VERSION}.tgz

        else
          echo "${chart/charts\//}: skipping"
          continue
        fi
      done

      cd ${TASK_ROOT}/charts
      git config remote.origin.fetch refs/heads/*:refs/remotes/origin/*
      git fetch --all
      helm repo index --url https://improwised.github.io/charts .
      cat index.yaml
      git add .
      git commit -m "releases $(date '+%Y-%m-%d-%H-%M-%S')"
      [[ $? != 0 ]] && echo "nothing to commit i guess"
